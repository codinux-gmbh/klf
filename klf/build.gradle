plugins {
    id("com.android.library")
    id("org.jetbrains.kotlin.multiplatform")
}


ext.artifactName = "klf"


//@OptIn(ExperimentalKotlinGradlePluginApi::class)
kotlin {
    jvmToolchain(11)

    compilerOptions {
        // suppresses compiler warning: [EXPECT_ACTUAL_CLASSIFIERS_ARE_IN_BETA_WARNING] 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta.
        freeCompilerArgs.add("-Xexpect-actual-classes")
    }


    jvm {
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()

            testLogging {     // This is for logging and can be removed.
                events("passed", "skipped", "failed")
            }
        }

        // register additional compilations and test tasks for slf4j bindings tests
        compilations { compilations ->
            createCompilation("logbackTest", compilations, "ch.qos.logback:logback-classic:$logbackVersion")
            createCompilation("log4j2Test", compilations, "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")
            createCompilation("log4j1Test", compilations, "org.slf4j:slf4j-log4j12:$slf4jVersion")
            createCompilation("julTest", compilations, "org.slf4j:slf4j-jdk14:$slf4jVersion")
            createCompilation("slf4jSimpleTest", compilations, "org.slf4j:slf4j-simple:$slf4jVersion")
        }
    }

    androidTarget { // name in Kotlin 1.9
        publishLibraryVariants("release")

        compilations.all {
            kotlinOptions.jvmTarget = JavaVersion.VERSION_11
        }
    }

    js {
        moduleName = "klf"
        binaries.executable()

        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    useFirefoxHeadless()
                }
            }
        }


        nodejs {
            testTask {
                useMocha {
                    timeout = "20s" // Mocha times out after 2 s, which may is too short for same tests
                }
            }
        }
    }

    wasmJs {
        browser {
            commonWebpackConfig {
                experiments.add("topLevelAwait")
            }

            testTask {
                useKarma {
                    useChromeHeadless()
                    useFirefoxHeadless()
                }
            }

            // Uncomment the next line to apply Binaryen and get optimized wasm binaries
             applyBinaryen()
        }

        //nodejs() // WASM Node.js does currently not work
    }


    linuxX64()
    mingwX64()


    iosX64()
    iosArm64()
    iosSimulatorArm64()
    macosX64()
    macosArm64()
    watchosArm64()
    watchosSimulatorArm64()
    tvosArm64()
    tvosSimulatorArm64()

    applyDefaultHierarchyTemplate()


    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin("reflect")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin("test")
            }
        }


        javaAndNativeCommonMain {
            dependsOn(commonMain)
        }
        javaAndNativeCommonTest {
            dependsOn(commonTest)
        }


        javaCommonMain {
            dependsOn(javaAndNativeCommonMain)

            dependencies {
                compileOnly "org.slf4j:slf4j-api:$slf4jVersion"
                compileOnly "org.apache.logging.log4j:log4j-core:$log4j2Version"
            }
        }
        javaCommonTest {
            dependsOn(javaAndNativeCommonTest)

            dependencies {
                implementation "org.assertj:assertj-core:$assertJVersion"
                implementation("io.mockk:mockk:1.13.5") {
                    exclude(group: "org.slf4j")
                }

                implementation "ch.qos.logback:logback-classic:$logbackVersion"
            }
        }

        jvmMain {
            dependsOn(javaCommonMain)
        }
        jvmTest {
            dependsOn(javaCommonTest)
        }

        androidMain {
            dependsOn(javaCommonMain)
        }
        androidUnitTest {
            dependsOn(javaCommonTest)
        }

        jsMain.dependencies {

        }

        nativeMain {
            dependsOn(javaAndNativeCommonMain)
        }
        linuxAndMingwMain {
            dependsOn(nativeMain)
        }
        linuxX64Main {
            dependsOn(linuxAndMingwMain)
        }
        mingwX64Main {
            dependsOn(linuxAndMingwMain)
        }
    }
}

android {
    namespace = "net.codinux.log"
    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")

    compileSdk(33)
    defaultConfig {
        minSdkVersion(21)
        targetSdkVersion(33)
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            // Otherwise we get this exception in tests:
            // Method e in android.util.Log not mocked. See https://developer.android.com/r/studio-ui/build/not-mocked for details.
            setReturnDefaultValues(true)
        }
        unitTests.all {
            useJUnitPlatform()
        }
    }
}


def createCompilation(String name, NamedDomainObjectContainer compilations, String... mavenDependencies) {
    def main = compilations.main
    def test = compilations.test

    // see https://kotlinlang.org/docs/multiplatform-configure-compilations.html#create-a-custom-compilation
    compilations.create(name) {
        defaultSourceSet {
            dependencies {
                // Compile against the main compilation's compile classpath and outputs:
                implementation(main.compileDependencyFiles + main.output.classesDirs + test.output.classesDirs)
                implementation project(":klf")
                implementation kotlin('test-junit')
                implementation("org.junit.jupiter:junit-jupiter-api:5.6.0")
                runtimeOnly("org.junit.jupiter:junit-jupiter-engine")
                for (String dependency : mavenDependencies) {
                    implementation dependency
                }
            }
        }

        tasks.register("jvm${name[0].toUpperCase()}${name.substring(1)}", Test) {
            group = "verification"

            useJUnitPlatform()

            // Run the tests with the classpath containing the compile dependencies (including 'main'),
            // runtime dependencies, and the outputs of this compilation:
            classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs

            // Run only the tests from this compilation's outputs:
            testClassesDirs = output.classesDirs

            // configure that this tasks runs with 'jvmTest' task
            tasks.named("jvmTest").get().dependsOn(it)
        }
    }
}


apply(from: "../gradle/scripts/publish-codinux.gradle.kts")